// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: src/proto/reviews.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReviewsServiceClient is the client API for ReviewsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReviewsServiceClient interface {
	GetReviewsFromRestaurant(ctx context.Context, in *GetReviewsFromRestaurantRequest, opts ...grpc.CallOption) (*GetReviewsFromRestaurantResponse, error)
	GetReviewsFromUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetReviewsFromUserResponse, error)
}

type reviewsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReviewsServiceClient(cc grpc.ClientConnInterface) ReviewsServiceClient {
	return &reviewsServiceClient{cc}
}

func (c *reviewsServiceClient) GetReviewsFromRestaurant(ctx context.Context, in *GetReviewsFromRestaurantRequest, opts ...grpc.CallOption) (*GetReviewsFromRestaurantResponse, error) {
	out := new(GetReviewsFromRestaurantResponse)
	err := c.cc.Invoke(ctx, "/ReviewsService/GetReviewsFromRestaurant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewsServiceClient) GetReviewsFromUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetReviewsFromUserResponse, error) {
	out := new(GetReviewsFromUserResponse)
	err := c.cc.Invoke(ctx, "/ReviewsService/GetReviewsFromUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReviewsServiceServer is the server API for ReviewsService service.
// All implementations must embed UnimplementedReviewsServiceServer
// for forward compatibility
type ReviewsServiceServer interface {
	GetReviewsFromRestaurant(context.Context, *GetReviewsFromRestaurantRequest) (*GetReviewsFromRestaurantResponse, error)
	GetReviewsFromUser(context.Context, *empty.Empty) (*GetReviewsFromUserResponse, error)
	mustEmbedUnimplementedReviewsServiceServer()
}

// UnimplementedReviewsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReviewsServiceServer struct {
}

func (UnimplementedReviewsServiceServer) GetReviewsFromRestaurant(context.Context, *GetReviewsFromRestaurantRequest) (*GetReviewsFromRestaurantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviewsFromRestaurant not implemented")
}
func (UnimplementedReviewsServiceServer) GetReviewsFromUser(context.Context, *empty.Empty) (*GetReviewsFromUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviewsFromUser not implemented")
}
func (UnimplementedReviewsServiceServer) mustEmbedUnimplementedReviewsServiceServer() {}

// UnsafeReviewsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReviewsServiceServer will
// result in compilation errors.
type UnsafeReviewsServiceServer interface {
	mustEmbedUnimplementedReviewsServiceServer()
}

func RegisterReviewsServiceServer(s grpc.ServiceRegistrar, srv ReviewsServiceServer) {
	s.RegisterService(&ReviewsService_ServiceDesc, srv)
}

func _ReviewsService_GetReviewsFromRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReviewsFromRestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewsServiceServer).GetReviewsFromRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ReviewsService/GetReviewsFromRestaurant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewsServiceServer).GetReviewsFromRestaurant(ctx, req.(*GetReviewsFromRestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewsService_GetReviewsFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewsServiceServer).GetReviewsFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ReviewsService/GetReviewsFromUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewsServiceServer).GetReviewsFromUser(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ReviewsService_ServiceDesc is the grpc.ServiceDesc for ReviewsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReviewsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ReviewsService",
	HandlerType: (*ReviewsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReviewsFromRestaurant",
			Handler:    _ReviewsService_GetReviewsFromRestaurant_Handler,
		},
		{
			MethodName: "GetReviewsFromUser",
			Handler:    _ReviewsService_GetReviewsFromUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/proto/reviews.proto",
}
