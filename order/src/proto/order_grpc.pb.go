// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: src/proto/order.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderServicesClient is the client API for OrderServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServicesClient interface {
	GetOrders(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetOrdersResponse, error)
	AddOrder(ctx context.Context, in *AddOrderRequest, opts ...grpc.CallOption) (*AddOrderResponse, error)
	GetOrdersFromRestaurant(ctx context.Context, in *GetOrdersFromRestaurantRequest, opts ...grpc.CallOption) (*GetOrdersFromRestaurantResponse, error)
}

type orderServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServicesClient(cc grpc.ClientConnInterface) OrderServicesClient {
	return &orderServicesClient{cc}
}

func (c *orderServicesClient) GetOrders(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetOrdersResponse, error) {
	out := new(GetOrdersResponse)
	err := c.cc.Invoke(ctx, "/OrderServices/GetOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServicesClient) AddOrder(ctx context.Context, in *AddOrderRequest, opts ...grpc.CallOption) (*AddOrderResponse, error) {
	out := new(AddOrderResponse)
	err := c.cc.Invoke(ctx, "/OrderServices/AddOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServicesClient) GetOrdersFromRestaurant(ctx context.Context, in *GetOrdersFromRestaurantRequest, opts ...grpc.CallOption) (*GetOrdersFromRestaurantResponse, error) {
	out := new(GetOrdersFromRestaurantResponse)
	err := c.cc.Invoke(ctx, "/OrderServices/GetOrdersFromRestaurant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServicesServer is the server API for OrderServices service.
// All implementations must embed UnimplementedOrderServicesServer
// for forward compatibility
type OrderServicesServer interface {
	GetOrders(context.Context, *empty.Empty) (*GetOrdersResponse, error)
	AddOrder(context.Context, *AddOrderRequest) (*AddOrderResponse, error)
	GetOrdersFromRestaurant(context.Context, *GetOrdersFromRestaurantRequest) (*GetOrdersFromRestaurantResponse, error)
	mustEmbedUnimplementedOrderServicesServer()
}

// UnimplementedOrderServicesServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServicesServer struct {
}

func (UnimplementedOrderServicesServer) GetOrders(context.Context, *empty.Empty) (*GetOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedOrderServicesServer) AddOrder(context.Context, *AddOrderRequest) (*AddOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrder not implemented")
}
func (UnimplementedOrderServicesServer) GetOrdersFromRestaurant(context.Context, *GetOrdersFromRestaurantRequest) (*GetOrdersFromRestaurantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersFromRestaurant not implemented")
}
func (UnimplementedOrderServicesServer) mustEmbedUnimplementedOrderServicesServer() {}

// UnsafeOrderServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServicesServer will
// result in compilation errors.
type UnsafeOrderServicesServer interface {
	mustEmbedUnimplementedOrderServicesServer()
}

func RegisterOrderServicesServer(s grpc.ServiceRegistrar, srv OrderServicesServer) {
	s.RegisterService(&OrderServices_ServiceDesc, srv)
}

func _OrderServices_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServicesServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderServices/GetOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServicesServer).GetOrders(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderServices_AddOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServicesServer).AddOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderServices/AddOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServicesServer).AddOrder(ctx, req.(*AddOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderServices_GetOrdersFromRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersFromRestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServicesServer).GetOrdersFromRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderServices/GetOrdersFromRestaurant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServicesServer).GetOrdersFromRestaurant(ctx, req.(*GetOrdersFromRestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderServices_ServiceDesc is the grpc.ServiceDesc for OrderServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OrderServices",
	HandlerType: (*OrderServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrders",
			Handler:    _OrderServices_GetOrders_Handler,
		},
		{
			MethodName: "AddOrder",
			Handler:    _OrderServices_AddOrder_Handler,
		},
		{
			MethodName: "GetOrdersFromRestaurant",
			Handler:    _OrderServices_GetOrdersFromRestaurant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/proto/order.proto",
}
